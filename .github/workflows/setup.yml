name: Versions

on:
  push:
    branches: [ main ]
    paths:
      - '**.ts'
      - '**.js'
      - '**.json'
      - '**.lock'
      - '.github/workflows/setup.yml'
  pull_request:
    paths:
      - '**.ts'
      - '**.js'
      - '**.json'
      - '**.lock'
      - '.github/workflows/setup.yml'

defaults:
  run:
    shell: bash
    working-directory: ./

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  TENCENT_APPID: ${{ secrets.TENCENT_APPID }}
  TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
  TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY}}
  GCLOUD_KEYFILE: ${{ secrets.GCLOUD_KEYFILE }}
  CLOUDFLARE_AUTH_KEY: ${{ secrets.CLOUDFLARE_AUTH_KEY }}
  CLOUDFLARE_AUTH_EMAIL: ${{ secrets.CLOUDFLARE_AUTH_EMAIL }}
  OW_AUTH: ${{ secrets.OW_AUTH }}
  OW_APIHOST: ${{ secrets.OW_APIHOST }}
  ALICLOUD_ACCOUNT_ID: ${{ secrets.ALICLOUD_ACCOUNT_ID }}
  ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
  ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY}}

jobs:
  setup:
    name: Setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        serverless-versions: [ 2.71.0, 3.38.0, latest ]
        providers: [ 'aws','azure','tencent','gcloud','cloudflare-workers','fn','kubeless','openwhisk','aliyun' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i --ignore-scripts --no-frozen-lockfile

      - name: Cache build
        uses: actions/cache@v4
        id: build-cache
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ hashFiles('./dist/index.js') }}

      - name: Build
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: pnpm run build

      - name: Setup Serverless - ${{ matrix['serverless-versions'] }}
        uses: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          serverless_version: ${{ matrix['serverless-versions'] }}
          provider: ${{ matrix['providers'] }}

      - name: Validate Teraform Version - ${{ matrix['serverless-versions'] }}
        run: |
          serverless -v
          sls -v